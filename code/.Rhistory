# Comprobamos que las variables tengan más de un valor único, ya que de lo contrario no funciona ad.test
for (i in 1:ncol(df)) {
if (is.numeric(df[, i]) | is.integer(df[, i])) {
if (length(unique(df[, i])) == 1) cols_eliminar[length(cols_eliminar) + 1] = col_names[i]
}
}
# Eliminamos dichas variables
df = df[, !(names(df) %in% cols_eliminar)]
col_names = colnames(df)
cat("Correlación respecto al campo \"rank\"\n")
for (i in 2:ncol(df)) { # Comenzamos en dos ya que la primera columna siempre es el ranking
if (is.numeric(df[, i]) | is.integer(df[, i])) {
value_corr = cor.test(df[, "rank"], df[, i])$estimate
cat("\n", col_names[i], " ", value_corr)
}
}
# for (i in 2:ncol(df)) {
#   if (is.numeric(df[, i]) | is.integer(df[, i])) {
#     chart.Correlation(data.frame(df[, "rank"], df[, i]))
#   }
# }
}
correlacion = function(df) {
col_name = c()
cols_eliminar = c()
# Comprobamos que las variables tengan más de un valor único, ya que de lo contrario no funciona ad.test
for (i in 1:ncol(df)) {
if (is.numeric(df[, i]) | is.integer(df[, i])) {
if (length(unique(df[, i])) == 1) cols_eliminar[length(cols_eliminar) + 1] = col_names[i]
}
}
# Eliminamos dichas variables
df = df[, !(names(df) %in% cols_eliminar)]
col_names = colnames(df)
cat("Correlación respecto al campo \"rank\"\n")
for (i in 2:ncol(df)) { # Comenzamos en dos ya que la primera columna siempre es el ranking
if (is.numeric(df[, i]) | is.integer(df[, i])) {
value_corr = cor.test(df[, "rank"], df[, i])$estimate
cat("\n", col_names[i], " ", value_corr)
}
}
# for (i in 2:ncol(df)) {
#   if (is.numeric(df[, i]) | is.integer(df[, i])) {
#     chart.Correlation(data.frame(df[, "rank"], df[, i]))
#   }
# }
}
correlacion(newgames.word)
correlacion = function(df) {
col_name = c()
cols_eliminar = c()
# Comprobamos que las variables tengan más de un valor único, ya que de lo contrario no funciona ad.test
for (i in 1:ncol(df)) {
if (is.numeric(df[, i]) | is.integer(df[, i])) {
if (length(unique(df[, i])) == 1) cols_eliminar[length(cols_eliminar) + 1] = col_names[i]
}
}
# Eliminamos dichas variables
df = df[, !(names(df) %in% cols_eliminar)]
col_names = colnames(df)
cat("Correlación respecto al campo \"rank\"\n")
for (i in 2:ncol(df)) { # Comenzamos en dos ya que la primera columna siempre es el ranking
if (is.numeric(df[, i]) | is.integer(df[, i])) {
value_corr = cor.test(df[, "rank"], df[, i])$estimate
cat("\n", col_names[i], " ", value_corr)
}
}
for (i in 2:ncol(df)) {
if (is.numeric(df[, i]) | is.integer(df[, i])) {
chart.Correlation(data.frame(df[, "rank"], df[, i]))
}
}
}
correlacion(newgames.word)
correlacion = function(df) {
col_names = c()
cols_eliminar = c()
# Comprobamos que las variables tengan más de un valor único, ya que de lo contrario no funciona ad.test
for (i in 1:ncol(df)) {
if (is.numeric(df[, i]) | is.integer(df[, i])) {
if (length(unique(df[, i])) == 1) cols_eliminar[length(cols_eliminar) + 1] = col_names[i]
}
}
# Eliminamos dichas variables
df = df[, !(names(df) %in% cols_eliminar)]
col_names = colnames(df)
cat("Correlación respecto al campo \"rank\"\n")
for (i in 2:ncol(df)) { # Comenzamos en dos ya que la primera columna siempre es el ranking
if (is.numeric(df[, i]) | is.integer(df[, i])) {
value_corr = cor.test(df[, "rank"], df[, i])$estimate
cat("\n", col_names[i], " ", value_corr)
}
}
for (i in 2:ncol(df)) {
if (is.numeric(df[, i]) | is.integer(df[, i])) {
chart.Correlation(data.frame(df[, "rank"], df[, i]))
}
}
}
correlacion = function(df) {
col_names = c()
cols_eliminar = c()
# Comprobamos que las variables tengan más de un valor único, ya que de lo contrario no funciona ad.test
for (i in 1:ncol(df)) {
if (is.numeric(df[, i]) | is.integer(df[, i])) {
if (length(unique(df[, i])) == 1) cols_eliminar[length(cols_eliminar) + 1] = col_names[i]
}
}
# Eliminamos dichas variables
df = df[, !(names(df) %in% cols_eliminar)]
col_names = colnames(df)
cat("Correlación respecto al campo \"rank\"\n")
for (i in 2:ncol(df)) { # Comenzamos en dos ya que la primera columna siempre es el ranking
if (is.numeric(df[, i]) | is.integer(df[, i])) {
value_corr = cor.test(df[, "rank"], df[, i])$estimate
cat("\n", col_names[i], " ", value_corr)
}
}
for (i in 2:ncol(df)) {
if (is.numeric(df[, i]) | is.integer(df[, i])) {
chart.Correlation(data.frame(df[, "rank"], df[, i]))
}
}
}
correlacion(newgames.word)
correlacion = function(df) {
cols_eliminar = c()
col_names = colnames(df)
# Comprobamos que las variables tengan más de un valor único, ya que de lo contrario no funciona ad.test
for (i in 1:ncol(df)) {
if (is.numeric(df[, i]) | is.integer(df[, i])) {
if (length(unique(df[, i])) == 1) cols_eliminar[length(cols_eliminar) + 1] = col_names[i]
}
}
# Eliminamos dichas variables
df = df[, !(names(df) %in% cols_eliminar)]
col_names = colnames(df)
cat("Correlación respecto al campo \"rank\"\n")
for (i in 2:ncol(df)) { # Comenzamos en dos ya que la primera columna siempre es el ranking
if (is.numeric(df[, i]) | is.integer(df[, i])) {
value_corr = cor.test(df[, "rank"], df[, i])$estimate
cat("\n", col_names[i], " ", value_corr)
}
}
for (i in 2:ncol(df)) {
if (is.numeric(df[, i]) | is.integer(df[, i])) {
chart.Correlation(data.frame(df[, "rank"], df[, i]))
}
}
}
correlacion(newgames.word)
correlacion(newgames.word)
correlacion = function(df) {
cols_eliminar = c()
col_names = colnames(df)
# Comprobamos que las variables tengan más de un valor único, ya que de lo contrario no funciona ad.test
for (i in 1:ncol(df)) {
if (is.numeric(df[, i]) | is.integer(df[, i])) {
if (length(unique(df[, i])) == 1) cols_eliminar[length(cols_eliminar) + 1] = col_names[i]
}
}
# Eliminamos dichas variables
df = df[, !(names(df) %in% cols_eliminar)]
col_names = colnames(df)
cat("Correlación respecto al campo \"rank\"\n")
for (i in 2:ncol(df)) { # Comenzamos en dos ya que la primera columna siempre es el ranking
if (is.numeric(df[, i]) | is.integer(df[, i])) {
value_corr = cor.test(df[, "rank"], df[, i])$estimate
cat("\n", col_names[i], " ", value_corr)
}
}
# for (i in 2:ncol(df)) {
#   if (is.numeric(df[, i]) | is.integer(df[, i])) {
#     chart.Correlation(data.frame(df[, "rank"], df[, i]))
#   }
# }
}
correlacion(newgames.word)
chart.Correlation(data.frame(newgames.word$rank, newgames.word$growth..30.days.))
chart.Correlation(data.frame(newgames.word$rank, newgames.word$X5.star.ratings))
chart.Correlation(data.frame(newgames.word$rank, newgames.word$X4.star.ratings))
chart.Correlation(data.frame(newgames.word$rank, newgames.word$X3.star.ratings))
chart.Correlation(data.frame(newgames.word$rank, newgames.word$X2.star.ratings))
chart.Correlation(data.frame(newgames.word$rank, newgames.word$X1.star.ratings))
chart.Correlation(data.frame(newgames.word$rank, newgames.word$int_installs))
cat("El número de observaciones de instalaciones bajas es: ", nrow(newgames.ins_low))
cat("El número de observaciones de instalaciones altas es: ", nrow(newgames.ins_high))
muestrasIndependientes_varianzasDesconocidas = function(valores_left, valores_right, alfa) {
# Calculamos el estadístico de contraste
sd_left = sd(valores_left)
sd_right = sd(valores_right)
n_left = length(valores_left)
n_right = length(valores_right)
numerador = mean(valores_left) - mean(valores_right)
denominador = sqrt(((sd_left)^2/n_left) + ((sd_right)^2/n_right))
z_obs = numerador / denominador
# Calculamos los grados de libertad
numerador = (((sd_left)^2/n_left) + ((sd_right)^2/n_right))^2
denominador = (((sd_left)^2/n_left)^2 / (n_left - 1)) + (((sd_right)^2/n_right)^2 / (n_right - 1))
grados_libertad = as.integer(numerador / denominador)
# Calculamos el punto crítico
z_cri = qt(alfa, df = grados_libertad, lower.tail = FALSE)
# Calculamos el p-valor
p_value = pt(z_obs, df = grados_libertad, lower.tail = FALSE)
# Devolvemos los valores
return(data.frame(L = "-INF", U = z_cri, Estadistico_Contraste = z_obs, P_Valor = p_value, Grados_Libertad = grados_libertad))
}
contraste_hipotesis = muestrasIndependientes_varianzasDesconocidas(ranking.ins_high, ranking.ins_low, 0.05)
ranking.ins_low = newgames.ins_low$rank
ranking.ins_high = newgames.ins_high$rank
cat("El número de observaciones de instalaciones bajas es: ", nrow(newgames.ins_low))
cat("El número de observaciones de instalaciones altas es: ", nrow(newgames.ins_high))
muestrasIndependientes_varianzasDesconocidas = function(valores_left, valores_right, alfa) {
# Calculamos el estadístico de contraste
sd_left = sd(valores_left)
sd_right = sd(valores_right)
n_left = length(valores_left)
n_right = length(valores_right)
numerador = mean(valores_left) - mean(valores_right)
denominador = sqrt(((sd_left)^2/n_left) + ((sd_right)^2/n_right))
z_obs = numerador / denominador
# Calculamos los grados de libertad
numerador = (((sd_left)^2/n_left) + ((sd_right)^2/n_right))^2
denominador = (((sd_left)^2/n_left)^2 / (n_left - 1)) + (((sd_right)^2/n_right)^2 / (n_right - 1))
grados_libertad = as.integer(numerador / denominador)
# Calculamos el punto crítico
z_cri = qt(alfa, df = grados_libertad, lower.tail = FALSE)
# Calculamos el p-valor
p_value = pt(z_obs, df = grados_libertad, lower.tail = FALSE)
# Devolvemos los valores
return(data.frame(L = "-INF", U = z_cri, Estadistico_Contraste = z_obs, P_Valor = p_value, Grados_Libertad = grados_libertad))
}
contraste_hipotesis = muestrasIndependientes_varianzasDesconocidas(ranking.ins_high, ranking.ins_low, 0.05)
contraste_hipotesis
t.test(ranking.ins_high, ranking.ins_low, alternative = "greater", var.equal = TRUE)
t.test(ranking.ins_high, ranking.ins_low, alternative = "greater", var.equal = FALSE)
t.test(ranking.ins_high, ranking.ins_low, alternative = "greater", var.equal = TRUE)
t.test(ranking.ins_high, ranking.ins_low, alternative = "greater", var.equal = TRUE)
t.test(ranking.ins_low, ranking.ins_high, alternative = "greater", var.equal = TRUE)
t.test(ranking.ins_high, ranking.ins_low, alternative = "greater", var.equal = TRUE)
str(newgames.word)
m1_rlm = lm(rank ~ growth..30.days. + price + int_installs, data = newgames.word)
m1_rlm
m1_rlm = lm(rank ~ growth..30.days. + int_installs, data = newgames.word)
m1_rlm
m1_rlm = lm(rank ~ growth..30.days. + int_installs, data = newgames.word)
summary(m1_rlm)
m1_rlm = lm(rank ~ growth..30.days. + int_installs, data = newgames.word)
m1_rlm = lm(rank ~ growth..30.days. + int_installs, data = newgames.word)
m2_rlm = lm(rank ~ X5.star.ratings + X3.star.ratings + X1.star.ratings + int_installs, data = newgames.word)
m3_rlm = lm(rank ~ X5.star.ratings + X4.star.ratings + X3.star.ratings + X2.star.ratings + X1.star.ratings + int_installs, data = newgames.word)
vec_R2 = c(summary(m1_rlm)$r.squared, summary(m2_rlm)$r.squared, summary(m3_rlm)$r.squared)
df_R2 = data.frame(vec_R2)
names(df_R2) = c("R2")
head(df_R2)
vec_modelos = c("Modelo 1", "Modelo 2", "Modelo 3")
vec_R2 = c(summary(m1_rlm)$r.squared, summary(m2_rlm)$r.squared, summary(m3_rlm)$r.squared)
df_R2 = data.frame(vec_modelos, vec_R2)
names(df_R2) = c("Modelos", "R2")
head(df_R2)
vec_modelos = c("Modelo 1", "Modelo 2", "Modelo 3")
vec_R2 = c(summary(m1_rlm)$r.squared, summary(m2_rlm)$r.squared, summary(m3_rlm)$r.squared)
df_R2 = data.frame(
vec_modelos,
vec_R2
)
names(df_R2) = c("Modelos", "R2")
head(df_R2)
head(newgames.word)
# Creamos el dataframe con los valores para predecir
df_game = data.frame(
X5.star.ratings = 945761,
X4.star.ratings = 30156,
X3.star.ratings = 5123,
X2.star.ratings = 439,
X1.star.ratings = 27899,
int_installs = 5000000
)
# Predecimos el rank que tendría nuestro juego
predict(m3_rlm, df_game)
# Creamos el dataframe con los valores para predecir
df_game = data.frame(
X5.star.ratings = 945761,
X4.star.ratings = 30156,
X3.star.ratings = 5123,
X2.star.ratings = 439,
X1.star.ratings = 27899,
int_installs = 5000000
)
# Predecimos el rank que tendría nuestro juego
cat(as.integer(predict(m3_rlm, df_game)))
# Creamos el dataframe con los valores para predecir
df_game = data.frame(
X5.star.ratings = 945761,
X4.star.ratings = 30156,
X3.star.ratings = 5123,
X2.star.ratings = 439,
X1.star.ratings = 27899,
int_installs = 5000000
)
# Predecimos el rank que tendría nuestro juego
cat(round(predict(m3_rlm, df_game)))
# Creamos el dataframe con los valores para predecir
df_game = data.frame(
X5.star.ratings = 945761,
X4.star.ratings = 30156,
X3.star.ratings = 5123,
X2.star.ratings = 439,
X1.star.ratings = 27899,
int_installs = 5000000
)
# Predecimos el rank que tendría nuestro juego
cat("El rank que tendría nuestro juego sería: "round(predict(m3_rlm, df_game)))
# Creamos el dataframe con los valores para predecir
df_game = data.frame(
X5.star.ratings = 945761,
X4.star.ratings = 30156,
X3.star.ratings = 5123,
X2.star.ratings = 439,
X1.star.ratings = 27899,
int_installs = 5000000
)
# Predecimos el rank que tendría nuestro juego
cat("El rank que tendría nuestro juego sería: ", round(predict(m3_rlm, df_game)))
# Creamos el dataframe con los valores para predecir
df_game = data.frame(
X5.star.ratings = 945761,
X4.star.ratings = 30156,
X3.star.ratings = 5123,
X2.star.ratings = 439,
X1.star.ratings = 27899,
int_installs = 5000000
)
# Predecimos el rank que tendría nuestro juego
cat("El rank que tendría nuestro juego sería el: ", round(predict(m3_rlm, df_game)))
# Creamos el dataframe con los valores para predecir
df_game = data.frame(
X5.star.ratings = 945761,
X4.star.ratings = 30156,
X3.star.ratings = 5123,
X2.star.ratings = 439,
X1.star.ratings = 27899,
int_installs = 50000
)
# Predecimos el rank que tendría nuestro juego
cat("El rank que tendría nuestro juego sería el: ", round(predict(m3_rlm, df_game)))
# Creamos el dataframe con los valores para predecir
df_game = data.frame(
X5.star.ratings = 945761,
X4.star.ratings = 30156,
X3.star.ratings = 5123,
X2.star.ratings = 439,
X1.star.ratings = 27899,
int_installs = 50
)
# Predecimos el rank que tendría nuestro juego
cat("El rank que tendría nuestro juego sería el: ", round(predict(m3_rlm, df_game)))
# Creamos el dataframe con los valores para predecir
df_game = data.frame(
X5.star.ratings = 945761,
X4.star.ratings = 30156,
X3.star.ratings = 5123,
X2.star.ratings = 439,
X1.star.ratings = 27899,
int_installs = 5
)
# Predecimos el rank que tendría nuestro juego
cat("El rank que tendría nuestro juego sería el: ", round(predict(m3_rlm, df_game)))
# Creamos el dataframe con los valores para predecir
df_game = data.frame(
X5.star.ratings = 945761,
X4.star.ratings = 30156,
X3.star.ratings = 5123,
X2.star.ratings = 439,
X1.star.ratings = 27899,
int_installs = 5000000000000
)
# Predecimos el rank que tendría nuestro juego
cat("El rank que tendría nuestro juego sería el: ", round(predict(m3_rlm, df_game)))
# Creamos el dataframe con los valores para predecir
df_game = data.frame(
X5.star.ratings = 945761,
X4.star.ratings = 30156,
X3.star.ratings = 5123,
X2.star.ratings = 439,
X1.star.ratings = 27899,
int_installs = 5000000
)
# Predecimos el rank que tendría nuestro juego
cat("El rank que tendría nuestro juego sería el: ", round(predict(m3_rlm, df_game)))
# newgames_discretizado
str(newgames.word)
# newgames_discretizado
str(newgames.word)
summary(newgames.word)
newgames_discretizado = newgames.word
# Discretización de rank
newgames_discretizado["d-rank"] = ordered(cut(newgames_discretizado[["rank"]], breaks = c(0,26,74,100), labels = c("Bajo", "Medio", "Alto")))
# Discretización de X5.star.ratings
newgames_discretizado["d-X5.star.ratings"] = ordered(cut(newgames_discretizado[["X5.star.ratings"]], breaks = c(0,121285,284850,1395623), labels = c("Bajo", "Medio", "Alto")))
# Discretización de X4.star.ratings
newgames_discretizado["d-X4.star.ratings"] = ordered(cut(newgames_discretizado[["X4.star.ratings"]], breaks = c(0,21082,71891,222920), labels = c("Bajo", "Medio", "Alto")))
# Discretización de X3.star.ratings
newgames_discretizado["d-X3.star.ratings"] = ordered(cut(newgames_discretizado[["X3.star.ratings"]], breaks = c(0,8884,29994,82726), labels = c("Bajo", "Medio", "Alto")))
# Discretización de X2.star.ratings
newgames_discretizado["d-X2.star.ratings"] = ordered(cut(newgames_discretizado[["X2.star.ratings"]], breaks = c(0,3011,10747,32652), labels = c("Bajo", "Medio", "Alto")))
# Discretización de X1.star.ratings
newgames_discretizado["d-X1.star.ratings"] = ordered(cut(newgames_discretizado[["X1.star.ratings"]], breaks = c(0,7122,26938,105952), labels = c("Bajo", "Medio", "Alto")))
# Discretización de int_installs
newgames_discretizado["d-int_installs"] = ordered(cut(newgames_discretizado[["int_installs"]], breaks = c(0, 10000000, 100000000), labels = c("Bajo","Alto")))
str(newgames_discretizado)
head(newgames_discretizado)
newgames_discretizado = newgames.word
# Discretización de rank
newgames_discretizado["d-rank"] = ordered(cut(newgames_discretizado[["rank"]], breaks = c(0,26,74,100), labels = c("Alto", "Medio", "Bajo")))
# Discretización de X5.star.ratings
newgames_discretizado["d-X5.star.ratings"] = ordered(cut(newgames_discretizado[["X5.star.ratings"]], breaks = c(0,121285,284850,1395623), labels = c("Bajo", "Medio", "Alto")))
# Discretización de X4.star.ratings
newgames_discretizado["d-X4.star.ratings"] = ordered(cut(newgames_discretizado[["X4.star.ratings"]], breaks = c(0,21082,71891,222920), labels = c("Bajo", "Medio", "Alto")))
# Discretización de X3.star.ratings
newgames_discretizado["d-X3.star.ratings"] = ordered(cut(newgames_discretizado[["X3.star.ratings"]], breaks = c(0,8884,29994,82726), labels = c("Bajo", "Medio", "Alto")))
# Discretización de X2.star.ratings
newgames_discretizado["d-X2.star.ratings"] = ordered(cut(newgames_discretizado[["X2.star.ratings"]], breaks = c(0,3011,10747,32652), labels = c("Bajo", "Medio", "Alto")))
# Discretización de X1.star.ratings
newgames_discretizado["d-X1.star.ratings"] = ordered(cut(newgames_discretizado[["X1.star.ratings"]], breaks = c(0,7122,26938,105952), labels = c("Bajo", "Medio", "Alto")))
# Discretización de int_installs
newgames_discretizado["d-int_installs"] = ordered(cut(newgames_discretizado[["int_installs"]], breaks = c(0, 10000000, 100000000), labels = c("Bajo","Alto")))
str(newgames_discretizado)
head(newgames_discretizado)
str(newgames_discretizado)
newgames_discretizado
str(newgames_discretizado)
head(newgames_discretizado)
summary(newgames_discretizado)
# str(newgames_discretizado)
# head(newgames_discretizado)
summary(newgames_discretizado)
newgames_discretizado = newgames.word
# Discretización de rank
newgames_discretizado["d-rank"] = ordered(cut(newgames_discretizado[["rank"]], breaks = c(0,26,74,100), labels = c("Alto", "Medio", "Bajo")))
# Discretización de X5.star.ratings
newgames_discretizado["d-X5.star.ratings"] = ordered(cut(newgames_discretizado[["X5.star.ratings"]], breaks = c(0,121285,284850,1395623), labels = c("Bajo", "Medio", "Alto")))
# Discretización de X4.star.ratings
newgames_discretizado["d-X4.star.ratings"] = ordered(cut(newgames_discretizado[["X4.star.ratings"]], breaks = c(0,21082,71891,222920), labels = c("Bajo", "Medio", "Alto")))
# Discretización de X3.star.ratings
newgames_discretizado["d-X3.star.ratings"] = ordered(cut(newgames_discretizado[["X3.star.ratings"]], breaks = c(0,8884,29994,82726), labels = c("Bajo", "Medio", "Alto")))
# Discretización de X2.star.ratings
newgames_discretizado["d-X2.star.ratings"] = ordered(cut(newgames_discretizado[["X2.star.ratings"]], breaks = c(0,3011,10747,32652), labels = c("Bajo", "Medio", "Alto")))
# Discretización de X1.star.ratings
newgames_discretizado["d-X1.star.ratings"] = ordered(cut(newgames_discretizado[["X1.star.ratings"]], breaks = c(0,7122,26938,105952), labels = c("Bajo", "Medio", "Alto")))
# Discretización de int_installs
newgames_discretizado["d-int_installs"] = ordered(cut(newgames_discretizado[["int_installs"]], breaks = c(0, 9999999, 100000000), labels = c("Bajo","Alto")))
# str(newgames_discretizado)
# head(newgames_discretizado)
summary(newgames_discretizado)
str(newgames_discretizado)
head(newgames_discretizado)
library(knitr)
library(lubridate)
library(VIM)
library(stringr)
library(psych)
library(readr)
library(pROC)
library(dplyr)
library(nortest)
library(PerformanceAnalytics)
library(ggplot2)
ggplot(data = newgames_discretizado, aes(x=`d-int_installs`,fill=`d-rank`)) + geom_bar(position = "fill") +
facet_wrap(~`d-int_installs`) +
xlab("Número de instalaciones") +
ylab("Frecuencia") +
scale_fill_manual(name = "Rank", values=c("#00bfc4","#f8766d")) +
ggtitle("Ranking respecto al número de instalaciones") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6))
ggplot(data = newgames_discretizado, aes(x=`d-int_installs`,fill=`d-rank`)) + geom_bar(position = "fill") +
facet_wrap(~`d-int_installs`) +
xlab("Número de instalaciones") +
ylab("Frecuencia") +
scale_fill_manual(name = "Rank", values=c("#00bfc4","#f8766d", "#fff300")) +
ggtitle("Ranking respecto al número de instalaciones") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.6))
ggplot(data = newgames_discretizado, aes(x=`d-int_installs`,fill=`d-rank`)) + geom_bar(position = "fill") +
xlab("Número de instalaciones") +
ylab("Frecuencia") +
scale_fill_manual(name = "Rank", values=c("#00bfc4","#f8766d", "#fff300")) +
ggtitle("Ranking respecto al número de instalaciones")
ggplot(data = newgames_discretizado, aes(x=`d-X5.star.ratings`,fill=`d-rank`)) + geom_bar(position = "fill") +
xlab("Número de calificaciones de 5 estrellas") +
ylab("Frecuencia") +
scale_fill_manual(name = "Rank", values=c("#00bfc4","#f8766d", "#fff300")) +
ggtitle("Ranking respecto al número de calificaciones de 5 estrellas")
ggplot(data = newgames_discretizado, aes(x=`d-X4.star.ratings`,fill=`d-rank`)) + geom_bar(position = "fill") +
xlab("Número de calificaciones de 4 estrellas") +
ylab("Frecuencia") +
scale_fill_manual(name = "Rank", values=c("#00bfc4","#f8766d", "#fff300")) +
ggtitle("Ranking respecto al número de calificaciones de 4 estrellas")
ggplot(data = newgames_discretizado, aes(x=`d-X3.star.ratings`,fill=`d-rank`)) + geom_bar(position = "fill") +
xlab("Número de calificaciones de 3 estrellas") +
ylab("Frecuencia") +
scale_fill_manual(name = "Rank", values=c("#00bfc4","#f8766d", "#fff300")) +
ggtitle("Ranking respecto al número de calificaciones de 3 estrellas")
ggplot(data = newgames_discretizado, aes(x=`d-X2.star.ratings`,fill=`d-rank`)) + geom_bar(position = "fill") +
xlab("Número de calificaciones de 2 estrellas") +
ylab("Frecuencia") +
scale_fill_manual(name = "Rank", values=c("#00bfc4","#f8766d", "#fff300")) +
ggtitle("Ranking respecto al número de calificaciones de 2 estrellas")
ggplot(data = newgames_discretizado, aes(x=`d-X1.star.ratings`,fill=`d-rank`)) + geom_bar(position = "fill") +
xlab("Número de calificaciones de 1 estrellas") +
ylab("Frecuencia") +
scale_fill_manual(name = "Rank", values=c("#00bfc4","#f8766d", "#fff300")) +
ggtitle("Ranking respecto al número de calificaciones de 1 estrellas")
